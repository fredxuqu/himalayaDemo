**********************************
** Macbook Install Mysql        **
**********************************
root@localhost: !4;Wx9TBRMyw

root Admin#@1010
test Admin#@1010Test

schema : solr


MySQL修改密码

关闭服务
系统偏好设置->MySQL->Stop MySQL Server

安全模式进入MySQL
annadeMacBook-Pro:~ anna$ sudo mysqld_safe --skip-grant-tables

重新打开一个终端 进入MySQL控制台
annadeMacBook-Pro:~ anna$ mysql -u root
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.7-rc MySQL Community Server (GPL)

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
提示已经成功进入控制台

修改密码，sql语句
mysql> update mysql.user set authentication_string=PASSWORD('Admin#@1010') where user='root';
Query OK, 1 row affected, 1 warning (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 1

mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)
修改成功，再次进入控制台
mysql> show databases;
这次可以进去了，但是随便执行一条语句依然报错啊

ERROR 1820 (HY000): You must SET PASSWORD before executing this statement
按照提示再次设置密码
mysql> set password for root@localhost=password('Admin#@1010');
Query OK, 0 rows affected, 1 warning (0.00 sec)
这次OK了，接下来就可以正常建表、查询 使用了。

mysql的启动和停止
mysql.server是包含在和 MySQL Unix分发包中的启动脚本,该脚本可以用于Linux和Solaris类似的系统中。这种系统使用 V-style（区别与BSD-style）系统运行目录来启动和停止服务。
mysql.server可以在MySQL安装目录中的support-files文件夹中找到，如果使用的是rpm安装包方式(与之相对应的另一种安装包方式是dpkg)，mysql.server脚本会被安装在/etc/init.d,而且会被重命名mysql。

另外一些发行版本会重命名为mysqld

1. Linux下启动/停止/重启启动命令如下：
/etc/init.d/mysqld start
/etc/init.d/mysqld stop
/etc/init.d/mysqld restart

2. Linux下以Service方式启动/停止/重启MySQL命令：
service mysqld start
service mysqld stop
service mysqld restart

or

service mysql start
service mysql stop
service mysql restart
service 命令就是调用/etc/init.d/下边的脚本来启动服务，等于直接使用/etc/init.d/* start

service 描述中讲到
DESCRIPTION
service runs a System V init script in as predictable environment as possible, removing most environment variables and with current working directory set to /.
The SCRIPT parameter specifies a System V init script, located in /etc/init.d/SCRIPT.
3. MAC OX命令行启动/停止/重启MySQL命令:

sudo /usr/local/mysql/support-files/mysql.server start
sudo /usr/local/mysql/support-files/mysql.server stop
sudo /usr/local/mysql/support-files/mysql.server restart

**********************************
** Macbook Install Mysql  End   **
**********************************




MacOS connect to mysql database
/usr/local/mysql/bin/mysql -uroot -p

create database name; 创建数据库 
use databasename; 选择数据库 
drop database name 直接删除数据库，不提醒 
show tables; 显示表 
describe tablename; 表的详细描述 
select * from tablename; 
Mysql命令查询一个表的记录总数(三种方法)
select count(*) from tablename;
或者
select count(*) as num from tablename;
或者
select count(*) as total from tablename;
select 中加上distinct去除重复字段 
mysqladmin drop databasename 删除数据库前，有提示。 
显示当前mysql版本和当前日期 
select version(),current_date; 


2、修改mysql中root的密码： 
shell>mysql -u root -p 
mysql> update user set password=password("Cheese#21") where user="root"; 
		update user set password=password("test") where user="test";

mysql> flush privileges //刷新数据库 

mysql>use dbname； 打开数据库： 
mysql>show databases; 显示所有数据库 
mysql>show tables; 显示数据库mysql中所有的表：先use mysql；然后 
mysql>describe user; 显示表mysql数据库中user表的列信息）； 

3、grant 
创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令something做这个 
mysql> grant all privileges on *.* to user@localhost identified by ’something’ with 
增加新用户 
格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码” 
GRANT ALL PRIVILEGES ON *.* TO monty@localhost IDENTIFIED BY ’something’ WITH GRANT OPTION; 
GRANT ALL PRIVILEGES ON *.* TO monty@”%” IDENTIFIED BY ’something’ WITH GRANT OPTION; 

删除授权： 
mysql> revoke all privileges on *.* from root@”%”; 
mysql> delete from user where user=”root” and host=”%”; 
mysql> flush privileges; 
创建一个用户custom在特定客户端it363.com登录，可访问特定数据库fangchandb 
mysql >grant select, insert, update, delete, create,drop on fangchandb.* to custom@ it363.com identified by ‘ passwd’ 

重命名表: 
mysql > alter table t1 rename t2; 


4、mysqldump 
备份数据库 
shell> mysqldump -h host -u root -p dbname >dbname_backup.sql 
恢复数据库 
shell> mysqladmin -h myhost -u root -p create dbname 
shell> mysqldump -h host -u root -p dbname < dbname_backup.sql 
如果只想卸出建表指令，则命令如下： 
shell> mysqladmin -u root -p -d databasename > a.sql 
如果只想卸出插入数据的sql命令，而不需要建表命令，则命令如下： 
shell> mysqladmin -u root -p -t databasename > a.sql 


那么如果我只想要数据，而不想要什么sql命令时，应该如何操作呢？ 
　　 mysqldump -T./ phptest driver 

其中，只有指定了-T参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目录，即与mysqldump同一目录。如果不指定driver 表，则将卸出整个数据库的数据。每个表会生成两个文件，一个为.sql文件，包含建表执行。另一个为.txt文件，只包含数据，且没有sql指令。 

5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。例如，如果在文件my_file.sql 中存放有查 询，可如下执行这些查询： 

例如，如果您想将建表语句提前写在sql.txt中: 
mysql > mysql -h myhost -u root -p database < sql.txt 

一 . 安装与配置MYSQL 
　　二 . 常用mysql命令行命令 
　　1 .mysql的启动与停止 
　　启动MYSQL服务 net start mysql 
　　停止MYSQL服务 net stop mysql 
　　2 . netstat –na | findstr 3306 查看被监听的端口 , findstr用于查找后面的端口是否存在 
　　3 . 在命令行中登陆MYSQL控制台 , 即使用 MYSQL COMMEND LINE TOOL 
　　 语法格式 mysql –user=root –password=123456 db_name 
　　 或 mysql –u root –p123456 db_name 
　　4 . 进入MYSQL命令行工具后 , 使用status; 或\s 查看运行环境信息 
　　5 . 切换连接数据库的语法 : use new_dbname; 
　　6 . 显示所有数据库 : show databases; 
　　7 . 显示数据库中的所有表 : show tables; 
　　8 . 显示某个表创建时的全部信息 : show create table table_name; 　　 
　　9 . 查看表的具体属性信息及表中各字段的描述 
　　 Describe table_name; 缩写形式 : desc table_name; 


　　三 。 MySql中的SQL语句 
　　1 . 数据库创建 : Create database db_name; 
　　数据库删除 : Drop database db_name; 删除时可先判断是否存在，写成 : drop database if exits db_name 
　　2 . 建表 : 创建数据表的语法 : create table table_name (字段1 数据类型 , 字段2 数据类型); 
　　 例 : create table mytable (id int , username char(20)); 
　　 删表 : drop table table_name; 例 : drop table mytable;  
　　3 . 添加数据 : Insert into 表名 [(字段1 , 字段2 , ….)] values (值1 , 值2 , …..); 
　　如果向表中的每个字段都插入一个值,那么前面 [ ] 括号内字段名可写也可不写 

例 : insert into mytable (id,username) values (1,’zhangsan’); 
　　 
　　4 . 查询 : 查询所有数据 : select * from table_name; 
　　查询指定字段的数据 : select 字段1 , 字段2 from table_name; 
　　例 : select id,username from mytable where id=1 order by desc;多表查询语句------------参照第17条实例 
　　 
　　5 . 更新指定数据 , 更新某一个字段的数据（注意，不是更新字段的名字） 
　　Update table_name set 字段名=’新值’ [, 字段2 =’新值’ , …..][where id=id_num] [order by 字段 顺序] 
　　例 : update mytable set username=’lisi’ where id=1; 
　　Order语句是查询的顺序 , 如 : order by id desc(或asc) , 顺序有两种 : desc倒序(100—1,即从最新数据往后查询),asc(从1-100)，Where和order语句也可用于查询select 与删除delete 
　　6. 删除表中的信息 : 
　　 删除整个表中的信息 : delete from table_name; 
　　 删除表中指定条件的语句 : delete from table_name where 条件语句 ; 条件语句如 : id=3; 
　　7. 创建数据库用户 
　　一次可以创建多个数据库用户如： 
　　CREATE USER username1 identified BY ‘password’ , username2 IDENTIFIED BY ‘password’…. 
　　8 . 用户的权限控制：grant 
　　 库，表级的权限控制 : 将某个库中的某个表的控制权赋予某个用户 
　　 Grant all ON db_name.table_name TO user_name [ indentified by ‘password’ ]; 
　　9 . 表结构的修改 
　　（1）增加一个字段格式： 
　　alter table table_name add column (字段名 字段类型); ----此方法带括号 
　　（2）指定字段插入的位置： 
　　alter table table_name add column 字段名 字段类型 after 某字段； 
　　删除一个字段： 
　　alter table table_name drop字段名; 
　　（3）修改字段名称/类型 
　　alter table table_name change 旧字段名 新字段名 新字段的类型; 

     （4）改表的名字 
　　alter table table_name rename to new_table_name; 
　　（5）一次性清空表中的所有数据 
　　truncate table table_name; 此方法也会使表中的取号器(ID)从1开始 
　　 
　　10 . 增加主键，外键，约束，索引。。。。(使用方法见17实例) 
　　① 约束（主键Primary key、唯一性Unique、非空Not Null） 
　　② 自动增张 auto_increment 
　　③外键Foreign key-----与reference table_name(col_name列名)配合使用，建表时单独使用 
　　④ 删除多个表中有关联的数据----设置foreign key 为set null ---具体设置参考帮助文档 
　　11. 查看数据库当前引擎 
　　 SHOW CREATE TABLE table_name; 
　　 修改数据库引擎 
　　 ALTER TABLE table_name ENGINE=MyISAM | InnoDB;  
　　12 . SQL语句运用实例: 
　　--1 建users表 
　　create table users (id int primary key auto_increment,nikename varchar(20) not null unique,password varchar(100) not null,address varchar(200), reg_date timestamp not null default CURRENT_TIMESTAMP);  
　　--2 建articles表,在建表时设置外键 
　　create table articles (id int primary key auto_increment,content longtext not null,userid int,constraint foreign key (userid) references users(id) on delete set null); 
　　----------------------------------------------------------------------- 
　　--2.1 建articles表,建表时不设置外键 
　　 create table articles (id int primary key auto_increment,content longtext not null,userid int); 
　　--2.2 给articles表设置外键 
　　 alter table articles add constraint foreign key (userid) references users(id) on delete set null; 
　　------------------------------------------------------------------------ 
　　--3. 向users表中插入数据,同时插入多条 
　　insert into users (id,nikename,password,address) values (1,'lyh1','1234',null),(10,'lyh22','4321','湖北武汉'),(null,'lyh333','5678', '北京海淀'); 

       --4. 向article中插入三条数据 
　　insert into articles (id,content,userid) values (2,'hahahahahaha',11),(null,'xixixixixix',10),(13,'aiaiaiaiaiaiaiaiaiaiaiaia',1),(14,'hohoahaoaoooooooooo',10); 
　　--5. 进行多表查询，选择users表中ID=10的用户发布的所有留言及该用户的所有信息 
　　select articles.id,articles.content,users.* from users,articles where users.id=10 and articles.userid=users.id order by articles.id desc; 
　　--6. 查看数据库引擎类型 
　　show create table users; 　 
　　--7. 修改数据库引擎类型 
　　alter table users engine=MyISAM; ---因为users表中ID被设置成外键，执行此句会出错 
　　--8. 同表查询,已知一个条件的情况下.查询ID号大于用户lyh1的ID号的所有用户 
　　select a.id,a.nikename,a.address from users a,users b where b.nikename='lyh1' and a.id>b.id; 
　　------也可写成 
　　select id,nikename,address from users where id>(select id from users where nikename='lyh1'); 
　　9. 显示年龄比领导还大的员工： 
　　select a.name from users a,users b where a.managerid=b.id and a.age>b.age; 
　　查询编号为2的发帖人: 先查articles表,得到发帖人的编号,再根据编号查users得到的用户名。 
　　接着用关联查询. 
　　select * from articles,users得到笛卡儿积,再加order by articles.id以便观察 
　　使用select * from articles,users where articles.id=2 筛选出2号帖子与每个用户的组合记录 
　　再使用select * from articles,users where articles.id=2 and articles.userid=users.id选出users.id等于2号帖的发帖人id的记录. 

只取用户名:select user where user.id=(select userid from articles where article.id =2) 
　　找出年龄比小王还大的人:假设小王是28岁,先想找出年龄大于28的人 
　　select * from users where age>(select age from users where name='xiaowang'); 
　　*****要查询的记录需要参照表里面的其他记录: 
　　select a.name from users a,users b where b.name='xiaowang' and a.age>b.age 
　　表里的每个用户都想pk一下.select a.nickname,b.nickname from users a,users b where a.id>b.id ; 
　　更保险的语句:select a.nickname,b.nickname from (select * from users order by id) a,(se 
　　lect * from users order by id) b where a.id>b.id ; 
　　再查询某个人发的所有帖子. 
　　select b.* from articles a , articles b where a.id=2 and a.userid=b.userid 
　　说明: 表之间存在着关系，ER概念的解释，用access中的示例数据库演示表之间的关系.只有innodb引擎才支持foreign key，mysql的任何引擎目前都不支持check约束。 
　　四、字符集出现错误解决办法 
　　出现的问题： 
　　mysql> update users 
　　-> set username='关羽' 
　　-> where userid=2; 
　　ERROR 1366 (HY000): Incorrect string value: '\xB9\xD8\xD3\xF0' for column 'usern 
　　ame' at row 1 
　　向表中插入中文字符时，出现错误。 
　　 
　　mysql> select * from users; 
　　+--------+----------+ 
　　| userid | username | 
　　+--------+----------+ 
　　| 2 | ???? | 
　　| 3 | ???? | 
　　| 4 | ?í?ù | 
　　+--------+----------+ 
　　3 rows in set (0.00 sec) 
　　表中的中文字符位乱码。 

解决办法： 
　　使用命令： 
　　mysql> status; 
　　-------------- 
　　mysql Ver 14.12 Distrib 5.0.45, for Win32 (ia32) 
　　 
　　Connection id: 8 
　　Current database: test 
　　Current user: root@localhost 
　　SSL: Not in use 
　　Using delimiter: ; 
　　Server version: 5.0.45-community-nt MySQL Community Edition (GPL) 
　　Protocol version: 10 
　　Connection: localhost via TCP/IP 
　　Server characterset: latin1 
　　Db characterset: latin1 
　　Client characterset: gbk 
　　Conn. characterset: gbk 
　　TCP port: 3306 
　　Uptime: 7 hours 39 min 19 sec 
　　Threads: 2 Questions: 174 Slow queries: 0 Opens: 57 Flush tables: 1 Open ta 
　　bles: 1 Queries per second avg: 0.006 
　　-------------- 
　　查看mysql发现Server characterset，Db characterset的字符集设成了latin1，所以出现中文乱码。 
　　 
　　mysql> show tables; 
　　+----------------+ 
　　| Tables_in_test | 
　　+----------------+ 
　　| users | 
　　+----------------+ 
　　1 row in set (0.00 sec) 
　　 
　　更改表的字符集。 
　　mysql> alter table users character set GBK; 
　　Query OK, 3 rows affected (0.08 sec) 

Records: 3 Duplicates: 0 Warnings: 0 
　　 
　　查看表的结构： 
　　mysql> show create users; 
　　ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that 
　　corresponds to your MySQL server version for the right syntax to use near 'users 
　　' at line 1 
　　mysql> show create table users; 
　　+-------+----------------------------------------------------------------------- 
　　------------------------------------------------------------------------------+ 
　　| Table | Create Table 
　　| 
　　+-------+----------------------------------------------------------------------- 
　　------------------------------------------------------------------------------+ 
　　| users | CREATE TABLE `users` ( 
　　`userid` int(11) default NULL, 
　　`username` char(20) character set latin1 default NULL 
　　) ENGINE=InnoDB DEFAULT CHARSET=gbk | 
　　+-------+----------------------------------------------------------------------- 
　　------------------------------------------------------------------------------+ 
　　1 row in set (0.00 sec) 
　　 
　　mysql> desc users; 
　　+----------+----------+------+-----+---------+-------+ 
　　| Field | Type | Null | Key | Default | Extra | 
　　+----------+----------+------+-----+---------+-------+ 
　　| userid | int(11) | YES | | NULL | | 
　　| username | char(20) | YES | | NULL | | 
　　+----------+----------+------+-----+---------+-------+ 
　　2 rows in set (0.02 sec) 
　　 
　　这时向表中插入中文然后有错误。 
　　mysql> insert into users values(88,'中文'); 
　　ERROR 1366 (HY000): Incorrect string value: '\xD6\xD0\xCE\xC4' for column 'usern 
　　ame' at row 1 
　　mysql> insert into users values(88,'中文'); 

mysql> insert into users values(88,'中文'); 
　　ERROR 1366 (HY000): Incorrect string value: '\xD6\xD0\xCE\xC4' for column 'usern 
　　ame' at row 1 
　　 
　　还要更改users表的username的字符集。 
　　mysql> alter table users modify username char(20) character set gbk; 
　　ERROR 1366 (HY000): Incorrect string value: '\xC0\xEE\xCB\xC4' for column 'usern 
　　ame' at row 1 
　　mysql> alter table users modify username char(20) character set gbk; 
　　ERROR 1366 (HY000): Incorrect string value: '\xC0\xEE\xCB\xC4' for column 'usern 
　　ame' at row 1 
　　 
　　因为表中已经有数据，所以更改username字符集的操作没有成*** 
　　清空users表中的数据 
　　mysql> truncate table users; 
　　Query OK, 3 rows affected (0.01 sec) 
　　 
　　从新更改user表中username的字符集 
　　mysql> alter table users modify username char(20) character set gbk; 
　　Query OK, 0 rows affected (0.06 sec) 
　　Records: 0 Duplicates: 0 Warnings: 0 
　　 
　　这时再插入中文字符，插入成***。 
　　mysql> insert into users values(88,'中文'); 
　　Query OK, 1 row affected (0.01 sec) 
　　 
　　mysql> select * from users; 
　　+--------+----------+ 
　　| userid | username | 
　　+--------+----------+ 
　　| 88 | 中文 | 
　　+--------+----------+ 
　　1 row in set (0.00 sec) 
　　mysql> 